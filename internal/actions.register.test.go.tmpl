{{- $root := . -}}
//
// Copyright 2016-2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

package reconcile

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	api "github.com/arangodb/kube-arangodb/pkg/apis/deployment/v1"
)

func Test_Actions(t *testing.T) {
    // Iterate over all actions
{{- range .actions }}

    t.Run("{{ . }}", func(t *testing.T) {
        ActionsExistence(t, api.ActionType{{ . }})
{{- $startupFailureGracePeriod := index $root.startupFailureGracePeriods . -}}
{{- if $startupFailureGracePeriod }}
        ActionsWrapWithActionStartFailureGracePeriod(t, api.ActionType{{ . }}, {{ $startupFailureGracePeriod }})
{{- end }}
{{- $isInternal := index $root.internal . }}
        t.Run("Internal", func(t *testing.T) {
{{- if $isInternal }}
            require.True(t, api.ActionType{{ . }}.Internal())
{{- else }}
            require.False(t, api.ActionType{{ . }}.Internal())
{{- end }}
        })
{{- $isOptional := index $root.optional . }}
        t.Run("Optional", func(t *testing.T) {
{{- if $isOptional }}
            require.True(t, api.ActionType{{ . }}.Optional())
{{- else }}
            require.False(t, api.ActionType{{ . }}.Optional())
{{- end }}
        })
    })
{{- end }}
}

func ActionsExistence(t *testing.T, action api.ActionType) {
    t.Run("Existence", func(t *testing.T) {
        _, ok := getActionFactory(action)
        require.True(t, ok)
    })
}

func ActionsWrapWithActionStartFailureGracePeriod(t *testing.T, action api.ActionType, timeout time.Duration) {
    t.Run("WrapWithActionStartFailureGracePeriod", func(t *testing.T) {
        f, ok := getActionFactory(action)
        require.True(t, ok)

        a := extractAction(f)
        require.NotNil(t, a)

        z, ok := a.(*actionStartFailureGracePeriod)
        require.True(t, ok)

        require.Equal(t, z.failureGracePeriod, timeout)
    })
}

func extractAction(f actionFactory) Action {
    return f(api.Action{}, nil)
}