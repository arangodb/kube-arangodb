//
// DISCLAIMER
//
// Copyright 2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: integrations/events/v1/definition/definition.proto

package definition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventsV1_Emit_FullMethodName = "/events.EventsV1/Emit"
)

// EventsV1Client is the client API for EventsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EventsV1 Service implementation
type EventsV1Client interface {
	// Sends events to the server once the stream is closed
	Emit(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventsV1Request, EventsV1Response], error)
}

type eventsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEventsV1Client(cc grpc.ClientConnInterface) EventsV1Client {
	return &eventsV1Client{cc}
}

func (c *eventsV1Client) Emit(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventsV1Request, EventsV1Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventsV1_ServiceDesc.Streams[0], EventsV1_Emit_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventsV1Request, EventsV1Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsV1_EmitClient = grpc.ClientStreamingClient[EventsV1Request, EventsV1Response]

// EventsV1Server is the server API for EventsV1 service.
// All implementations must embed UnimplementedEventsV1Server
// for forward compatibility.
//
// EventsV1 Service implementation
type EventsV1Server interface {
	// Sends events to the server once the stream is closed
	Emit(grpc.ClientStreamingServer[EventsV1Request, EventsV1Response]) error
	mustEmbedUnimplementedEventsV1Server()
}

// UnimplementedEventsV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsV1Server struct{}

func (UnimplementedEventsV1Server) Emit(grpc.ClientStreamingServer[EventsV1Request, EventsV1Response]) error {
	return status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedEventsV1Server) mustEmbedUnimplementedEventsV1Server() {}
func (UnimplementedEventsV1Server) testEmbeddedByValue()                  {}

// UnsafeEventsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsV1Server will
// result in compilation errors.
type UnsafeEventsV1Server interface {
	mustEmbedUnimplementedEventsV1Server()
}

func RegisterEventsV1Server(s grpc.ServiceRegistrar, srv EventsV1Server) {
	// If the following call pancis, it indicates UnimplementedEventsV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventsV1_ServiceDesc, srv)
}

func _EventsV1_Emit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsV1Server).Emit(&grpc.GenericServerStream[EventsV1Request, EventsV1Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventsV1_EmitServer = grpc.ClientStreamingServer[EventsV1Request, EventsV1Response]

// EventsV1_ServiceDesc is the grpc.ServiceDesc for EventsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventsV1",
	HandlerType: (*EventsV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Emit",
			Handler:       _EventsV1_Emit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "integrations/events/v1/definition/definition.proto",
}
