// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: integrations/events/v1/definition/definition.proto

package definition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventsV1Client is the client API for EventsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsV1Client interface {
	// Sends events to the server once the stream is closed
	Emit(ctx context.Context, opts ...grpc.CallOption) (EventsV1_EmitClient, error)
}

type eventsV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEventsV1Client(cc grpc.ClientConnInterface) EventsV1Client {
	return &eventsV1Client{cc}
}

func (c *eventsV1Client) Emit(ctx context.Context, opts ...grpc.CallOption) (EventsV1_EmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventsV1_ServiceDesc.Streams[0], "/events.EventsV1/Emit", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsV1EmitClient{stream}
	return x, nil
}

type EventsV1_EmitClient interface {
	Send(*EventsV1Request) error
	CloseAndRecv() (*EventsV1Response, error)
	grpc.ClientStream
}

type eventsV1EmitClient struct {
	grpc.ClientStream
}

func (x *eventsV1EmitClient) Send(m *EventsV1Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsV1EmitClient) CloseAndRecv() (*EventsV1Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EventsV1Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsV1Server is the server API for EventsV1 service.
// All implementations must embed UnimplementedEventsV1Server
// for forward compatibility
type EventsV1Server interface {
	// Sends events to the server once the stream is closed
	Emit(EventsV1_EmitServer) error
	mustEmbedUnimplementedEventsV1Server()
}

// UnimplementedEventsV1Server must be embedded to have forward compatible implementations.
type UnimplementedEventsV1Server struct {
}

func (UnimplementedEventsV1Server) Emit(EventsV1_EmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedEventsV1Server) mustEmbedUnimplementedEventsV1Server() {}

// UnsafeEventsV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsV1Server will
// result in compilation errors.
type UnsafeEventsV1Server interface {
	mustEmbedUnimplementedEventsV1Server()
}

func RegisterEventsV1Server(s grpc.ServiceRegistrar, srv EventsV1Server) {
	s.RegisterService(&EventsV1_ServiceDesc, srv)
}

func _EventsV1_Emit_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsV1Server).Emit(&eventsV1EmitServer{stream})
}

type EventsV1_EmitServer interface {
	SendAndClose(*EventsV1Response) error
	Recv() (*EventsV1Request, error)
	grpc.ServerStream
}

type eventsV1EmitServer struct {
	grpc.ServerStream
}

func (x *eventsV1EmitServer) SendAndClose(m *EventsV1Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsV1EmitServer) Recv() (*EventsV1Request, error) {
	m := new(EventsV1Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsV1_ServiceDesc is the grpc.ServiceDesc for EventsV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventsV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.EventsV1",
	HandlerType: (*EventsV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Emit",
			Handler:       _EventsV1_Emit_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "integrations/events/v1/definition/definition.proto",
}
