//
// DISCLAIMER
//
// Copyright 2016-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

syntax = "proto3";

package scheduler;

import "integrations/scheduler/v1/definition/batchjob.proto";
import "integrations/scheduler/v1/definition/common.proto";
import "integrations/scheduler/v1/definition/cronjob.proto";
import "integrations/scheduler/v1/definition/deployment.proto";

option go_package = "github.com/arangodb/kube-arangodb/integrations/scheduler/v1/definition";

// Definition of the ServiceInterface for Scheduler V1
service SchedulerV1 {
  // BatchJob

  // Creates BatchJob from specification
  rpc CreateBatchJob(CreateBatchJobRequest) returns (CreateBatchJobResponse) {};

  // Returns BatchJob. If job does not exists, Exists flag is set to false
  rpc GetBatchJob(GetBatchJobRequest) returns (GetBatchJobResponse) {};

  // Returns list of the BatchJobs
  rpc ListBatchJob(ListBatchJobRequest) returns (ListBatchJobResponse) {};

  // Deletes BatchJob. If job does not exists, Exists flag is set to false
  rpc DeleteBatchJob(DeleteBatchJobRequest) returns (DeleteBatchJobResponse) {};

  // CronJob

  // Creates CronJob from specification
  rpc CreateCronJob(CreateCronJobRequest) returns (CreateCronJobResponse) {};

  // Returns CronJob. If job does not exists, Exists flag is set to false
  rpc GetCronJob(GetCronJobRequest) returns (GetCronJobResponse) {};

  // Updates CronJob from specification
  rpc UpdateCronJob(UpdateCronJobRequest) returns (UpdateCronJobResponse) {};

  // Returns list of the CronJobs
  rpc ListCronJob(ListCronJobRequest) returns (ListCronJobResponse) {};

  // Deletes CronJob. If job does not exists, Exists flag is set to false
  rpc DeleteCronJob(DeleteCronJobRequest) returns (DeleteCronJobResponse) {};

  // Deployment

  // Creates Deployment from specification
  rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse) {};

  // Returns Deployment. If job does not exists, Exists flag is set to false
  rpc GetDeployment(GetDeploymentRequest) returns (GetDeploymentResponse) {};

  // Updates Deployment from specification
  rpc UpdateDeployment(UpdateDeploymentRequest) returns (UpdateDeploymentResponse) {};

  // Returns list of the Deployments
  rpc ListDeployment(ListDeploymentRequest) returns (ListDeploymentResponse) {};

  // Deletes Deployment. If job does not exists, Exists flag is set to false
  rpc DeleteDeployment(DeleteDeploymentRequest) returns (DeleteDeploymentResponse) {};
}

// BatchJob

// Create Request
message CreateBatchJobRequest {
  // Spec of the Schedule request
  Spec spec = 1;

  // BatchJob run settings
  BatchJobSpec batch_job = 2;
}

// Create Response
message CreateBatchJobResponse {
  // Name of the scheduled job
  string name = 1;
}

// Get Request
message GetBatchJobRequest {
  // Name of the scheduled job
  string name = 1;
}

// Get Response
message GetBatchJobResponse {
  // Defines if job was found
  bool exists = 1;

  // BatchJob run settings and current status
  optional BatchJob batch_job = 2;
}

// List Request
message ListBatchJobRequest {
}

// List Response
message ListBatchJobResponse {

  // List of the BatchJobs
  repeated string batch_jobs = 1;
}

// Delete Request
message DeleteBatchJobRequest {
  // Name of the scheduled job
  string name = 1;

  // Defines if all child containers/pods should be removed together with job
  optional bool delete_child_pods = 2;
}

// Delete Response
message DeleteBatchJobResponse {
  // Defines if job was found
  bool exists = 1;
}

// CronJob

// Create Request
message CreateCronJobRequest {
  // Spec of the Schedule request
  Spec spec = 1;

  // CronJob run settings
  CronJobSpec cron_job = 2;
}

// Create Response
message CreateCronJobResponse {
  // Name of the scheduled job
  string name = 1;
}

// Get Request
message GetCronJobRequest {
  // Name of the scheduled job
  string name = 1;
}

// Get Response
message GetCronJobResponse {
  // Defines if job was found
  bool exists = 1;

  // CronJob run settings and current status
  optional CronJob cron_job = 2;
}

// Update Request
message UpdateCronJobRequest {
  // Name of the scheduled job
  string name = 1;

  // CronJob spec to be updated
  CronJobSpec spec = 2;
}

// Update Response
message UpdateCronJobResponse {
  // Defines if job was found
  bool exists = 1;

  // CronJob run settings and current status
  optional CronJob cron_job = 2;
}

// List Request
message ListCronJobRequest {
}

// List Response
message ListCronJobResponse {
  // List of the CronJobs
  repeated string cron_jobs = 1;
}

// Delete Request
message DeleteCronJobRequest {
  // Name of the scheduled job
  string name = 1;

  // Defines if all child containers/pods should be removed together with job
  optional bool delete_child_pods = 2;
}

// Delete Response
message DeleteCronJobResponse {
  // Defines if job was found
  bool exists = 1;
}

// Deployment

// Create Request
message CreateDeploymentRequest {
  // Spec of the Schedule request
  Spec spec = 1;

  // Deployment run settings
  DeploymentSpec deployment = 2;
}

// Create Response
message CreateDeploymentResponse {
  // Name of the scheduled deployment
  string name = 1;
}

// Get Request
message GetDeploymentRequest {
  // Name of the scheduled deployment
  string name = 1;
}

// Get Response
message GetDeploymentResponse {
  // Defines if deployment was found
  bool exists = 1;

  // Deployment run settings and current status
  optional Deployment deployment = 2;
}

// Update Request
message UpdateDeploymentRequest {
  // Name of the scheduled deployment
  string name = 1;

  // Deployment spec to be updated
  DeploymentSpec spec = 2;
}

// Update Response
message UpdateDeploymentResponse {
  // Defines if deployment was found
  bool exists = 1;

  // Deployment run settings and current status
  optional Deployment deployment = 2;
}

// List Request
message ListDeploymentRequest {
}

// List Response
message ListDeploymentResponse {
  // List of the Deployments
  repeated string deployments = 1;
}

// Delete Request
message DeleteDeploymentRequest {
  // Name of the scheduled deployment
  string name = 1;

  // Defines if all child containers/pods should be removed together with deployment
  optional bool delete_child_pods = 2;
}

// Delete Response
message DeleteDeploymentResponse {
  // Defines if deployment was found
  bool exists = 1;
}