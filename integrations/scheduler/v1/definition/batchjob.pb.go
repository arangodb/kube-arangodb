//
// DISCLAIMER
//
// Copyright 2024 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.1
// source: integrations/scheduler/v1/definition/batchjob.proto

package definition

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Keeps information about Kubernetes Batch/V1 Job
type BatchJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// defines object status metadate
	Metadata *StatusMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Keeps BatchJob settings
	Spec *BatchJobSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Keeps current BatchJob Status
	Status *BatchJobStatus `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *BatchJob) Reset() {
	*x = BatchJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJob) ProtoMessage() {}

func (x *BatchJob) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJob.ProtoReflect.Descriptor instead.
func (*BatchJob) Descriptor() ([]byte, []int) {
	return file_integrations_scheduler_v1_definition_batchjob_proto_rawDescGZIP(), []int{0}
}

func (x *BatchJob) GetMetadata() *StatusMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BatchJob) GetSpec() *BatchJobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BatchJob) GetStatus() *BatchJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Information about BatchJob run settings, like completions and parallelism
type BatchJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of concurrent Pods which are started within a job. Defaults to 1
	Parallelism *int32 `protobuf:"varint,1,opt,name=parallelism,proto3,oneof" json:"parallelism,omitempty"`
	// Number of expected completed runs. Defaults to 1
	Completions *int32 `protobuf:"varint,2,opt,name=completions,proto3,oneof" json:"completions,omitempty"`
	// Number of allowed Pod failures. Defaults to 0
	BackoffLimit *int32 `protobuf:"varint,3,opt,name=backoff_limit,json=backoffLimit,proto3,oneof" json:"backoff_limit,omitempty"`
}

func (x *BatchJobSpec) Reset() {
	*x = BatchJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobSpec) ProtoMessage() {}

func (x *BatchJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobSpec.ProtoReflect.Descriptor instead.
func (*BatchJobSpec) Descriptor() ([]byte, []int) {
	return file_integrations_scheduler_v1_definition_batchjob_proto_rawDescGZIP(), []int{1}
}

func (x *BatchJobSpec) GetParallelism() int32 {
	if x != nil && x.Parallelism != nil {
		return *x.Parallelism
	}
	return 0
}

func (x *BatchJobSpec) GetCompletions() int32 {
	if x != nil && x.Completions != nil {
		return *x.Completions
	}
	return 0
}

func (x *BatchJobSpec) GetBackoffLimit() int32 {
	if x != nil && x.BackoffLimit != nil {
		return *x.BackoffLimit
	}
	return 0
}

// Information about BatchJob Status
type BatchJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of active and running Pods within BatchJob
	Active int32 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	// Number of completed Pods withing BatchJob
	Succeeded int32 `protobuf:"varint,2,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	// Number of failed Pods within BatchJob
	Failed int32 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *BatchJobStatus) Reset() {
	*x = BatchJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobStatus) ProtoMessage() {}

func (x *BatchJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobStatus.ProtoReflect.Descriptor instead.
func (*BatchJobStatus) Descriptor() ([]byte, []int) {
	return file_integrations_scheduler_v1_definition_batchjob_proto_rawDescGZIP(), []int{2}
}

func (x *BatchJobStatus) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *BatchJobStatus) GetSucceeded() int32 {
	if x != nil {
		return x.Succeeded
	}
	return 0
}

func (x *BatchJobStatus) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

var File_integrations_scheduler_v1_definition_batchjob_proto protoreflect.FileDescriptor

var file_integrations_scheduler_v1_definition_batchjob_proto_rawDesc = []byte{
	0x0a, 0x33, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x6a, 0x6f, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x1a, 0x31, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62,
	0x12, 0x35, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66,
	0x66, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x5e, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x2d, 0x61,
	0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_integrations_scheduler_v1_definition_batchjob_proto_rawDescOnce sync.Once
	file_integrations_scheduler_v1_definition_batchjob_proto_rawDescData = file_integrations_scheduler_v1_definition_batchjob_proto_rawDesc
)

func file_integrations_scheduler_v1_definition_batchjob_proto_rawDescGZIP() []byte {
	file_integrations_scheduler_v1_definition_batchjob_proto_rawDescOnce.Do(func() {
		file_integrations_scheduler_v1_definition_batchjob_proto_rawDescData = protoimpl.X.CompressGZIP(file_integrations_scheduler_v1_definition_batchjob_proto_rawDescData)
	})
	return file_integrations_scheduler_v1_definition_batchjob_proto_rawDescData
}

var file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_integrations_scheduler_v1_definition_batchjob_proto_goTypes = []interface{}{
	(*BatchJob)(nil),       // 0: scheduler.BatchJob
	(*BatchJobSpec)(nil),   // 1: scheduler.BatchJobSpec
	(*BatchJobStatus)(nil), // 2: scheduler.BatchJobStatus
	(*StatusMetadata)(nil), // 3: scheduler.StatusMetadata
}
var file_integrations_scheduler_v1_definition_batchjob_proto_depIdxs = []int32{
	3, // 0: scheduler.BatchJob.metadata:type_name -> scheduler.StatusMetadata
	1, // 1: scheduler.BatchJob.spec:type_name -> scheduler.BatchJobSpec
	2, // 2: scheduler.BatchJob.status:type_name -> scheduler.BatchJobStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_integrations_scheduler_v1_definition_batchjob_proto_init() }
func file_integrations_scheduler_v1_definition_batchjob_proto_init() {
	if File_integrations_scheduler_v1_definition_batchjob_proto != nil {
		return
	}
	file_integrations_scheduler_v1_definition_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_integrations_scheduler_v1_definition_batchjob_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_integrations_scheduler_v1_definition_batchjob_proto_goTypes,
		DependencyIndexes: file_integrations_scheduler_v1_definition_batchjob_proto_depIdxs,
		MessageInfos:      file_integrations_scheduler_v1_definition_batchjob_proto_msgTypes,
	}.Build()
	File_integrations_scheduler_v1_definition_batchjob_proto = out.File
	file_integrations_scheduler_v1_definition_batchjob_proto_rawDesc = nil
	file_integrations_scheduler_v1_definition_batchjob_proto_goTypes = nil
	file_integrations_scheduler_v1_definition_batchjob_proto_depIdxs = nil
}
