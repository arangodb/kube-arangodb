//
// DISCLAIMER
//
// Copyright 2024 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: integrations/storage/v2/definition/storage.proto

package definition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageV2_Init_FullMethodName         = "/storage.StorageV2/Init"
	StorageV2_ReadObject_FullMethodName   = "/storage.StorageV2/ReadObject"
	StorageV2_WriteObject_FullMethodName  = "/storage.StorageV2/WriteObject"
	StorageV2_HeadObject_FullMethodName   = "/storage.StorageV2/HeadObject"
	StorageV2_DeleteObject_FullMethodName = "/storage.StorageV2/DeleteObject"
	StorageV2_ListObjects_FullMethodName  = "/storage.StorageV2/ListObjects"
)

// StorageV2Client is the client API for StorageV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Defines StorageV2 Service
type StorageV2Client interface {
	// Allows to init the Storage settings (like bucket creation)
	Init(ctx context.Context, in *StorageV2InitRequest, opts ...grpc.CallOption) (*StorageV2InitResponse, error)
	// Allows to Read Objects using stream
	ReadObject(ctx context.Context, in *StorageV2ReadObjectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageV2ReadObjectResponse], error)
	// Allows to Write Objects using stream
	WriteObject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse], error)
	// Gets basic info about object
	HeadObject(ctx context.Context, in *StorageV2HeadObjectRequest, opts ...grpc.CallOption) (*StorageV2HeadObjectResponse, error)
	// Deletes object
	DeleteObject(ctx context.Context, in *StorageV2DeleteObjectRequest, opts ...grpc.CallOption) (*StorageV2DeleteObjectResponse, error)
	// List all objects in batches
	ListObjects(ctx context.Context, in *StorageV2ListObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageV2ListObjectsResponse], error)
}

type storageV2Client struct {
	cc grpc.ClientConnInterface
}

func NewStorageV2Client(cc grpc.ClientConnInterface) StorageV2Client {
	return &storageV2Client{cc}
}

func (c *storageV2Client) Init(ctx context.Context, in *StorageV2InitRequest, opts ...grpc.CallOption) (*StorageV2InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageV2InitResponse)
	err := c.cc.Invoke(ctx, StorageV2_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageV2Client) ReadObject(ctx context.Context, in *StorageV2ReadObjectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageV2ReadObjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[0], StorageV2_ReadObject_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorageV2ReadObjectRequest, StorageV2ReadObjectResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_ReadObjectClient = grpc.ServerStreamingClient[StorageV2ReadObjectResponse]

func (c *storageV2Client) WriteObject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[1], StorageV2_WriteObject_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_WriteObjectClient = grpc.ClientStreamingClient[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]

func (c *storageV2Client) HeadObject(ctx context.Context, in *StorageV2HeadObjectRequest, opts ...grpc.CallOption) (*StorageV2HeadObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageV2HeadObjectResponse)
	err := c.cc.Invoke(ctx, StorageV2_HeadObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageV2Client) DeleteObject(ctx context.Context, in *StorageV2DeleteObjectRequest, opts ...grpc.CallOption) (*StorageV2DeleteObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageV2DeleteObjectResponse)
	err := c.cc.Invoke(ctx, StorageV2_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageV2Client) ListObjects(ctx context.Context, in *StorageV2ListObjectsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StorageV2ListObjectsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[2], StorageV2_ListObjects_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StorageV2ListObjectsRequest, StorageV2ListObjectsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_ListObjectsClient = grpc.ServerStreamingClient[StorageV2ListObjectsResponse]

// StorageV2Server is the server API for StorageV2 service.
// All implementations must embed UnimplementedStorageV2Server
// for forward compatibility.
//
// Defines StorageV2 Service
type StorageV2Server interface {
	// Allows to init the Storage settings (like bucket creation)
	Init(context.Context, *StorageV2InitRequest) (*StorageV2InitResponse, error)
	// Allows to Read Objects using stream
	ReadObject(*StorageV2ReadObjectRequest, grpc.ServerStreamingServer[StorageV2ReadObjectResponse]) error
	// Allows to Write Objects using stream
	WriteObject(grpc.ClientStreamingServer[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]) error
	// Gets basic info about object
	HeadObject(context.Context, *StorageV2HeadObjectRequest) (*StorageV2HeadObjectResponse, error)
	// Deletes object
	DeleteObject(context.Context, *StorageV2DeleteObjectRequest) (*StorageV2DeleteObjectResponse, error)
	// List all objects in batches
	ListObjects(*StorageV2ListObjectsRequest, grpc.ServerStreamingServer[StorageV2ListObjectsResponse]) error
	mustEmbedUnimplementedStorageV2Server()
}

// UnimplementedStorageV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageV2Server struct{}

func (UnimplementedStorageV2Server) Init(context.Context, *StorageV2InitRequest) (*StorageV2InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedStorageV2Server) ReadObject(*StorageV2ReadObjectRequest, grpc.ServerStreamingServer[StorageV2ReadObjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedStorageV2Server) WriteObject(grpc.ClientStreamingServer[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WriteObject not implemented")
}
func (UnimplementedStorageV2Server) HeadObject(context.Context, *StorageV2HeadObjectRequest) (*StorageV2HeadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObject not implemented")
}
func (UnimplementedStorageV2Server) DeleteObject(context.Context, *StorageV2DeleteObjectRequest) (*StorageV2DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedStorageV2Server) ListObjects(*StorageV2ListObjectsRequest, grpc.ServerStreamingServer[StorageV2ListObjectsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedStorageV2Server) mustEmbedUnimplementedStorageV2Server() {}
func (UnimplementedStorageV2Server) testEmbeddedByValue()                   {}

// UnsafeStorageV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageV2Server will
// result in compilation errors.
type UnsafeStorageV2Server interface {
	mustEmbedUnimplementedStorageV2Server()
}

func RegisterStorageV2Server(s grpc.ServiceRegistrar, srv StorageV2Server) {
	// If the following call pancis, it indicates UnimplementedStorageV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageV2_ServiceDesc, srv)
}

func _StorageV2_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageV2InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageV2Server).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageV2_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageV2Server).Init(ctx, req.(*StorageV2InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageV2_ReadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageV2ReadObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageV2Server).ReadObject(m, &grpc.GenericServerStream[StorageV2ReadObjectRequest, StorageV2ReadObjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_ReadObjectServer = grpc.ServerStreamingServer[StorageV2ReadObjectResponse]

func _StorageV2_WriteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageV2Server).WriteObject(&grpc.GenericServerStream[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_WriteObjectServer = grpc.ClientStreamingServer[StorageV2WriteObjectRequest, StorageV2WriteObjectResponse]

func _StorageV2_HeadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageV2HeadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageV2Server).HeadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageV2_HeadObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageV2Server).HeadObject(ctx, req.(*StorageV2HeadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageV2_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageV2DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageV2Server).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageV2_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageV2Server).DeleteObject(ctx, req.(*StorageV2DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageV2_ListObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageV2ListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageV2Server).ListObjects(m, &grpc.GenericServerStream[StorageV2ListObjectsRequest, StorageV2ListObjectsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StorageV2_ListObjectsServer = grpc.ServerStreamingServer[StorageV2ListObjectsResponse]

// StorageV2_ServiceDesc is the grpc.ServiceDesc for StorageV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageV2",
	HandlerType: (*StorageV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _StorageV2_Init_Handler,
		},
		{
			MethodName: "HeadObject",
			Handler:    _StorageV2_HeadObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _StorageV2_DeleteObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadObject",
			Handler:       _StorageV2_ReadObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteObject",
			Handler:       _StorageV2_WriteObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListObjects",
			Handler:       _StorageV2_ListObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integrations/storage/v2/definition/storage.proto",
}
