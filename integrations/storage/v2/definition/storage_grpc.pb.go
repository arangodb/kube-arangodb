// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: integrations/storage/v2/definition/storage.proto

package definition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageV2Client is the client API for StorageV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageV2Client interface {
	// Allows to Read Objects using stream
	ReadObject(ctx context.Context, in *StorageV2ReadObjectRequest, opts ...grpc.CallOption) (StorageV2_ReadObjectClient, error)
	// Allows to Write Objects using stream
	WriteObject(ctx context.Context, opts ...grpc.CallOption) (StorageV2_WriteObjectClient, error)
	// Gets basic info about object
	HeadObject(ctx context.Context, in *StorageV2HeadObjectRequest, opts ...grpc.CallOption) (*StorageV2HeadObjectResponse, error)
	// Deletes object
	DeleteObject(ctx context.Context, in *StorageV2DeleteObjectRequest, opts ...grpc.CallOption) (*StorageV2DeleteObjectResponse, error)
	// List all objects in batches
	ListObjects(ctx context.Context, in *StorageV2ListObjectsRequest, opts ...grpc.CallOption) (StorageV2_ListObjectsClient, error)
}

type storageV2Client struct {
	cc grpc.ClientConnInterface
}

func NewStorageV2Client(cc grpc.ClientConnInterface) StorageV2Client {
	return &storageV2Client{cc}
}

func (c *storageV2Client) ReadObject(ctx context.Context, in *StorageV2ReadObjectRequest, opts ...grpc.CallOption) (StorageV2_ReadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[0], "/shutdown.StorageV2/ReadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageV2ReadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageV2_ReadObjectClient interface {
	Recv() (*StorageV2ReadObjectResponse, error)
	grpc.ClientStream
}

type storageV2ReadObjectClient struct {
	grpc.ClientStream
}

func (x *storageV2ReadObjectClient) Recv() (*StorageV2ReadObjectResponse, error) {
	m := new(StorageV2ReadObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageV2Client) WriteObject(ctx context.Context, opts ...grpc.CallOption) (StorageV2_WriteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[1], "/shutdown.StorageV2/WriteObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageV2WriteObjectClient{stream}
	return x, nil
}

type StorageV2_WriteObjectClient interface {
	Send(*StorageV2WriteObjectRequest) error
	CloseAndRecv() (*StorageV2WriteObjectResponse, error)
	grpc.ClientStream
}

type storageV2WriteObjectClient struct {
	grpc.ClientStream
}

func (x *storageV2WriteObjectClient) Send(m *StorageV2WriteObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageV2WriteObjectClient) CloseAndRecv() (*StorageV2WriteObjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StorageV2WriteObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageV2Client) HeadObject(ctx context.Context, in *StorageV2HeadObjectRequest, opts ...grpc.CallOption) (*StorageV2HeadObjectResponse, error) {
	out := new(StorageV2HeadObjectResponse)
	err := c.cc.Invoke(ctx, "/shutdown.StorageV2/HeadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageV2Client) DeleteObject(ctx context.Context, in *StorageV2DeleteObjectRequest, opts ...grpc.CallOption) (*StorageV2DeleteObjectResponse, error) {
	out := new(StorageV2DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/shutdown.StorageV2/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageV2Client) ListObjects(ctx context.Context, in *StorageV2ListObjectsRequest, opts ...grpc.CallOption) (StorageV2_ListObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageV2_ServiceDesc.Streams[2], "/shutdown.StorageV2/ListObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageV2ListObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageV2_ListObjectsClient interface {
	Recv() (*StorageV2ListObjectsResponse, error)
	grpc.ClientStream
}

type storageV2ListObjectsClient struct {
	grpc.ClientStream
}

func (x *storageV2ListObjectsClient) Recv() (*StorageV2ListObjectsResponse, error) {
	m := new(StorageV2ListObjectsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageV2Server is the server API for StorageV2 service.
// All implementations must embed UnimplementedStorageV2Server
// for forward compatibility
type StorageV2Server interface {
	// Allows to Read Objects using stream
	ReadObject(*StorageV2ReadObjectRequest, StorageV2_ReadObjectServer) error
	// Allows to Write Objects using stream
	WriteObject(StorageV2_WriteObjectServer) error
	// Gets basic info about object
	HeadObject(context.Context, *StorageV2HeadObjectRequest) (*StorageV2HeadObjectResponse, error)
	// Deletes object
	DeleteObject(context.Context, *StorageV2DeleteObjectRequest) (*StorageV2DeleteObjectResponse, error)
	// List all objects in batches
	ListObjects(*StorageV2ListObjectsRequest, StorageV2_ListObjectsServer) error
	mustEmbedUnimplementedStorageV2Server()
}

// UnimplementedStorageV2Server must be embedded to have forward compatible implementations.
type UnimplementedStorageV2Server struct {
}

func (UnimplementedStorageV2Server) ReadObject(*StorageV2ReadObjectRequest, StorageV2_ReadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedStorageV2Server) WriteObject(StorageV2_WriteObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteObject not implemented")
}
func (UnimplementedStorageV2Server) HeadObject(context.Context, *StorageV2HeadObjectRequest) (*StorageV2HeadObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObject not implemented")
}
func (UnimplementedStorageV2Server) DeleteObject(context.Context, *StorageV2DeleteObjectRequest) (*StorageV2DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedStorageV2Server) ListObjects(*StorageV2ListObjectsRequest, StorageV2_ListObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedStorageV2Server) mustEmbedUnimplementedStorageV2Server() {}

// UnsafeStorageV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageV2Server will
// result in compilation errors.
type UnsafeStorageV2Server interface {
	mustEmbedUnimplementedStorageV2Server()
}

func RegisterStorageV2Server(s grpc.ServiceRegistrar, srv StorageV2Server) {
	s.RegisterService(&StorageV2_ServiceDesc, srv)
}

func _StorageV2_ReadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageV2ReadObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageV2Server).ReadObject(m, &storageV2ReadObjectServer{stream})
}

type StorageV2_ReadObjectServer interface {
	Send(*StorageV2ReadObjectResponse) error
	grpc.ServerStream
}

type storageV2ReadObjectServer struct {
	grpc.ServerStream
}

func (x *storageV2ReadObjectServer) Send(m *StorageV2ReadObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageV2_WriteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageV2Server).WriteObject(&storageV2WriteObjectServer{stream})
}

type StorageV2_WriteObjectServer interface {
	SendAndClose(*StorageV2WriteObjectResponse) error
	Recv() (*StorageV2WriteObjectRequest, error)
	grpc.ServerStream
}

type storageV2WriteObjectServer struct {
	grpc.ServerStream
}

func (x *storageV2WriteObjectServer) SendAndClose(m *StorageV2WriteObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageV2WriteObjectServer) Recv() (*StorageV2WriteObjectRequest, error) {
	m := new(StorageV2WriteObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageV2_HeadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageV2HeadObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageV2Server).HeadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shutdown.StorageV2/HeadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageV2Server).HeadObject(ctx, req.(*StorageV2HeadObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageV2_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorageV2DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageV2Server).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shutdown.StorageV2/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageV2Server).DeleteObject(ctx, req.(*StorageV2DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageV2_ListObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorageV2ListObjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageV2Server).ListObjects(m, &storageV2ListObjectsServer{stream})
}

type StorageV2_ListObjectsServer interface {
	Send(*StorageV2ListObjectsResponse) error
	grpc.ServerStream
}

type storageV2ListObjectsServer struct {
	grpc.ServerStream
}

func (x *storageV2ListObjectsServer) Send(m *StorageV2ListObjectsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StorageV2_ServiceDesc is the grpc.ServiceDesc for StorageV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shutdown.StorageV2",
	HandlerType: (*StorageV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeadObject",
			Handler:    _StorageV2_HeadObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _StorageV2_DeleteObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadObject",
			Handler:       _StorageV2_ReadObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteObject",
			Handler:       _StorageV2_WriteObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListObjects",
			Handler:       _StorageV2_ListObjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integrations/storage/v2/definition/storage.proto",
}
