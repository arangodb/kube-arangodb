//
// DISCLAIMER
//
// Copyright 2016-2022 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: integrations/shutdown/v1/definition/shutdown.proto

package definition

import (
	context "context"
	definition "github.com/arangodb/kube-arangodb/integrations/shared/v1/definition"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShutdownV1_Shutdown_FullMethodName = "/shutdown.ShutdownV1/Shutdown"
)

// ShutdownV1Client is the client API for ShutdownV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShutdownV1 Service implementation
type ShutdownV1Client interface {
	// ShutdownServer sends the shutdown request
	Shutdown(ctx context.Context, in *definition.Empty, opts ...grpc.CallOption) (*definition.Empty, error)
}

type shutdownV1Client struct {
	cc grpc.ClientConnInterface
}

func NewShutdownV1Client(cc grpc.ClientConnInterface) ShutdownV1Client {
	return &shutdownV1Client{cc}
}

func (c *shutdownV1Client) Shutdown(ctx context.Context, in *definition.Empty, opts ...grpc.CallOption) (*definition.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(definition.Empty)
	err := c.cc.Invoke(ctx, ShutdownV1_Shutdown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShutdownV1Server is the server API for ShutdownV1 service.
// All implementations must embed UnimplementedShutdownV1Server
// for forward compatibility.
//
// ShutdownV1 Service implementation
type ShutdownV1Server interface {
	// ShutdownServer sends the shutdown request
	Shutdown(context.Context, *definition.Empty) (*definition.Empty, error)
	mustEmbedUnimplementedShutdownV1Server()
}

// UnimplementedShutdownV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShutdownV1Server struct{}

func (UnimplementedShutdownV1Server) Shutdown(context.Context, *definition.Empty) (*definition.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedShutdownV1Server) mustEmbedUnimplementedShutdownV1Server() {}
func (UnimplementedShutdownV1Server) testEmbeddedByValue()                    {}

// UnsafeShutdownV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShutdownV1Server will
// result in compilation errors.
type UnsafeShutdownV1Server interface {
	mustEmbedUnimplementedShutdownV1Server()
}

func RegisterShutdownV1Server(s grpc.ServiceRegistrar, srv ShutdownV1Server) {
	// If the following call pancis, it indicates UnimplementedShutdownV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShutdownV1_ServiceDesc, srv)
}

func _ShutdownV1_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(definition.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShutdownV1Server).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShutdownV1_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShutdownV1Server).Shutdown(ctx, req.(*definition.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShutdownV1_ServiceDesc is the grpc.ServiceDesc for ShutdownV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShutdownV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shutdown.ShutdownV1",
	HandlerType: (*ShutdownV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _ShutdownV1_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/shutdown/v1/definition/shutdown.proto",
}
