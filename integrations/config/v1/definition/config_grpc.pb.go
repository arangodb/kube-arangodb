// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: integrations/config/v1/definition/config.proto

package definition

import (
	context "context"
	definition "github.com/arangodb/kube-arangodb/integrations/shared/v1/definition"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigV1Client is the client API for ConfigV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigV1Client interface {
	Modules(ctx context.Context, in *definition.Empty, opts ...grpc.CallOption) (*ConfigV1ModulesResponse, error)
	ModuleDetails(ctx context.Context, in *ConfigV1ModuleDetailsRequest, opts ...grpc.CallOption) (*ConfigV1ModuleDetailsResponse, error)
	FileDetails(ctx context.Context, in *ConfigV1FileDetailsRequest, opts ...grpc.CallOption) (*ConfigV1FileDetailsResponse, error)
}

type configV1Client struct {
	cc grpc.ClientConnInterface
}

func NewConfigV1Client(cc grpc.ClientConnInterface) ConfigV1Client {
	return &configV1Client{cc}
}

func (c *configV1Client) Modules(ctx context.Context, in *definition.Empty, opts ...grpc.CallOption) (*ConfigV1ModulesResponse, error) {
	out := new(ConfigV1ModulesResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigV1/Modules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configV1Client) ModuleDetails(ctx context.Context, in *ConfigV1ModuleDetailsRequest, opts ...grpc.CallOption) (*ConfigV1ModuleDetailsResponse, error) {
	out := new(ConfigV1ModuleDetailsResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigV1/ModuleDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configV1Client) FileDetails(ctx context.Context, in *ConfigV1FileDetailsRequest, opts ...grpc.CallOption) (*ConfigV1FileDetailsResponse, error) {
	out := new(ConfigV1FileDetailsResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigV1/FileDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigV1Server is the server API for ConfigV1 service.
// All implementations must embed UnimplementedConfigV1Server
// for forward compatibility
type ConfigV1Server interface {
	Modules(context.Context, *definition.Empty) (*ConfigV1ModulesResponse, error)
	ModuleDetails(context.Context, *ConfigV1ModuleDetailsRequest) (*ConfigV1ModuleDetailsResponse, error)
	FileDetails(context.Context, *ConfigV1FileDetailsRequest) (*ConfigV1FileDetailsResponse, error)
	mustEmbedUnimplementedConfigV1Server()
}

// UnimplementedConfigV1Server must be embedded to have forward compatible implementations.
type UnimplementedConfigV1Server struct {
}

func (UnimplementedConfigV1Server) Modules(context.Context, *definition.Empty) (*ConfigV1ModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modules not implemented")
}
func (UnimplementedConfigV1Server) ModuleDetails(context.Context, *ConfigV1ModuleDetailsRequest) (*ConfigV1ModuleDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleDetails not implemented")
}
func (UnimplementedConfigV1Server) FileDetails(context.Context, *ConfigV1FileDetailsRequest) (*ConfigV1FileDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDetails not implemented")
}
func (UnimplementedConfigV1Server) mustEmbedUnimplementedConfigV1Server() {}

// UnsafeConfigV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigV1Server will
// result in compilation errors.
type UnsafeConfigV1Server interface {
	mustEmbedUnimplementedConfigV1Server()
}

func RegisterConfigV1Server(s grpc.ServiceRegistrar, srv ConfigV1Server) {
	s.RegisterService(&ConfigV1_ServiceDesc, srv)
}

func _ConfigV1_Modules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(definition.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigV1Server).Modules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigV1/Modules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigV1Server).Modules(ctx, req.(*definition.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigV1_ModuleDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigV1ModuleDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigV1Server).ModuleDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigV1/ModuleDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigV1Server).ModuleDetails(ctx, req.(*ConfigV1ModuleDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigV1_FileDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigV1FileDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigV1Server).FileDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigV1/FileDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigV1Server).FileDetails(ctx, req.(*ConfigV1FileDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigV1_ServiceDesc is the grpc.ServiceDesc for ConfigV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigV1",
	HandlerType: (*ConfigV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Modules",
			Handler:    _ConfigV1_Modules_Handler,
		},
		{
			MethodName: "ModuleDetails",
			Handler:    _ConfigV1_ModuleDetails_Handler,
		},
		{
			MethodName: "FileDetails",
			Handler:    _ConfigV1_FileDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/config/v1/definition/config.proto",
}
