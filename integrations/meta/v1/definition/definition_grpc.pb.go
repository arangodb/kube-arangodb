//
// DISCLAIMER
//
// Copyright 2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: integrations/meta/v1/definition/definition.proto

package definition

import (
	context "context"
	definition "github.com/arangodb/kube-arangodb/integrations/shared/v1/definition"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaV1_Get_FullMethodName    = "/meta.MetaV1/Get"
	MetaV1_Set_FullMethodName    = "/meta.MetaV1/Set"
	MetaV1_Delete_FullMethodName = "/meta.MetaV1/Delete"
	MetaV1_List_FullMethodName   = "/meta.MetaV1/List"
)

// MetaV1Client is the client API for MetaV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MetaV1 define ServiceInterface for Meta V1
type MetaV1Client interface {
	// Get returns the Object from the Meta Store. If TTL is set to 0, result is not cached
	Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Set saves the object in the Meta Store
	// Optionally, will check Revision for the conflict management
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Delete deletes the object from the Meta Store
	Delete(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*definition.Empty, error)
	// List lists the object from the Meta Store
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListResponseChunk], error)
}

type metaV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetaV1Client(cc grpc.ClientConnInterface) MetaV1Client {
	return &metaV1Client{cc}
}

func (c *metaV1Client) Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, MetaV1_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaV1Client) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, MetaV1_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaV1Client) Delete(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*definition.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(definition.Empty)
	err := c.cc.Invoke(ctx, MetaV1_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaV1Client) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListResponseChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MetaV1_ServiceDesc.Streams[0], MetaV1_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListRequest, ListResponseChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetaV1_ListClient = grpc.ServerStreamingClient[ListResponseChunk]

// MetaV1Server is the server API for MetaV1 service.
// All implementations must embed UnimplementedMetaV1Server
// for forward compatibility.
//
// MetaV1 define ServiceInterface for Meta V1
type MetaV1Server interface {
	// Get returns the Object from the Meta Store. If TTL is set to 0, result is not cached
	Get(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Set saves the object in the Meta Store
	// Optionally, will check Revision for the conflict management
	Set(context.Context, *SetRequest) (*ObjectResponse, error)
	// Delete deletes the object from the Meta Store
	Delete(context.Context, *ObjectRequest) (*definition.Empty, error)
	// List lists the object from the Meta Store
	List(*ListRequest, grpc.ServerStreamingServer[ListResponseChunk]) error
	mustEmbedUnimplementedMetaV1Server()
}

// UnimplementedMetaV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaV1Server struct{}

func (UnimplementedMetaV1Server) Get(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetaV1Server) Set(context.Context, *SetRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMetaV1Server) Delete(context.Context, *ObjectRequest) (*definition.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetaV1Server) List(*ListRequest, grpc.ServerStreamingServer[ListResponseChunk]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetaV1Server) mustEmbedUnimplementedMetaV1Server() {}
func (UnimplementedMetaV1Server) testEmbeddedByValue()                {}

// UnsafeMetaV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaV1Server will
// result in compilation errors.
type UnsafeMetaV1Server interface {
	mustEmbedUnimplementedMetaV1Server()
}

func RegisterMetaV1Server(s grpc.ServiceRegistrar, srv MetaV1Server) {
	// If the following call pancis, it indicates UnimplementedMetaV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaV1_ServiceDesc, srv)
}

func _MetaV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaV1_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Get(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaV1_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaV1_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaV1_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Delete(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaV1_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetaV1Server).List(m, &grpc.GenericServerStream[ListRequest, ListResponseChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MetaV1_ListServer = grpc.ServerStreamingServer[ListResponseChunk]

// MetaV1_ServiceDesc is the grpc.ServiceDesc for MetaV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.MetaV1",
	HandlerType: (*MetaV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MetaV1_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _MetaV1_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetaV1_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _MetaV1_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integrations/meta/v1/definition/definition.proto",
}
