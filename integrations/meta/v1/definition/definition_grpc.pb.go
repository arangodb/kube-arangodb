// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: integrations/meta/v1/definition/definition.proto

package definition

import (
	context "context"
	definition "github.com/arangodb/kube-arangodb/integrations/shared/v1/definition"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaV1Client is the client API for MetaV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaV1Client interface {
	// Get returns the Object from the Meta Store. If TTL is set to 0, result is not cached
	Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Set saves the object in the Meta Store
	// Optionally, will check Revision for the conflict management
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Delete deletes saves the object from the Meta Store
	Delete(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*definition.Empty, error)
}

type metaV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetaV1Client(cc grpc.ClientConnInterface) MetaV1Client {
	return &metaV1Client{cc}
}

func (c *metaV1Client) Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaV1Client) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaV1/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaV1Client) Delete(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*definition.Empty, error) {
	out := new(definition.Empty)
	err := c.cc.Invoke(ctx, "/meta.MetaV1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaV1Server is the server API for MetaV1 service.
// All implementations must embed UnimplementedMetaV1Server
// for forward compatibility
type MetaV1Server interface {
	// Get returns the Object from the Meta Store. If TTL is set to 0, result is not cached
	Get(context.Context, *ObjectRequest) (*ObjectResponse, error)
	// Set saves the object in the Meta Store
	// Optionally, will check Revision for the conflict management
	Set(context.Context, *SetRequest) (*ObjectResponse, error)
	// Delete deletes saves the object from the Meta Store
	Delete(context.Context, *ObjectRequest) (*definition.Empty, error)
	mustEmbedUnimplementedMetaV1Server()
}

// UnimplementedMetaV1Server must be embedded to have forward compatible implementations.
type UnimplementedMetaV1Server struct {
}

func (UnimplementedMetaV1Server) Get(context.Context, *ObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetaV1Server) Set(context.Context, *SetRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMetaV1Server) Delete(context.Context, *ObjectRequest) (*definition.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetaV1Server) mustEmbedUnimplementedMetaV1Server() {}

// UnsafeMetaV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaV1Server will
// result in compilation errors.
type UnsafeMetaV1Server interface {
	mustEmbedUnimplementedMetaV1Server()
}

func RegisterMetaV1Server(s grpc.ServiceRegistrar, srv MetaV1Server) {
	s.RegisterService(&MetaV1_ServiceDesc, srv)
}

func _MetaV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Get(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaV1_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaV1/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaV1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaV1Server).Delete(ctx, req.(*ObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaV1_ServiceDesc is the grpc.ServiceDesc for MetaV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.MetaV1",
	HandlerType: (*MetaV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MetaV1_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _MetaV1_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MetaV1_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/meta/v1/definition/definition.proto",
}
