// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: pkg/api/ml/storage/v1/bucketservice.proto

package v1

import (
	context "context"
	v1 "github.com/arangodb/kube-arangodb/pkg/api/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketServiceClient interface {
	// Get the current API version of this service.
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// BucketExists checks if the specified bucket exists
	BucketExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.YesOrNo, error)
	// CreateBucket creates a bucket
	CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// DeleteBucket deletes a bucket
	// Notice that this deletes all data contained in the bucket as well
	DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// GetRepositoryURL get the URL needed to store/delete objects in a bucket
	GetRepositoryURL(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*RepositoryURL, error)
	// DeletePath deletes the specified path (recursively) from the provided bucket
	DeletePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// GetPathSize provides the size in bytes for the specified path from the provided bucket
	GetPathSize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathSize, error)
	// ReadObject opens an object in the bucket and streams the existing data from the object into the client
	ReadObject(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (BucketService_ReadObjectClient, error)
	// WriteObject creates or opens an object in the bucket and allows the client to stream (additional) data into the object
	WriteObject(ctx context.Context, opts ...grpc.CallOption) (BucketService_WriteObjectClient, error)
	// GetObjectInfo provides information for the specified object from the provided bucket
	// A Not-Found error is returned if the object cannot be found
	GetObjectInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ObjectInfo, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BucketExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.YesOrNo, error) {
	out := new(v1.YesOrNo)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/BucketExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetRepositoryURL(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*RepositoryURL, error) {
	out := new(RepositoryURL)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/GetRepositoryURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeletePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/DeletePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetPathSize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathSize, error) {
	out := new(PathSize)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/GetPathSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) ReadObject(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (BucketService_ReadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &BucketService_ServiceDesc.Streams[0], "/arangodb.operator.ml.storage.v1.BucketService/ReadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceReadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BucketService_ReadObjectClient interface {
	Recv() (*ReadObjectChunk, error)
	grpc.ClientStream
}

type bucketServiceReadObjectClient struct {
	grpc.ClientStream
}

func (x *bucketServiceReadObjectClient) Recv() (*ReadObjectChunk, error) {
	m := new(ReadObjectChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) WriteObject(ctx context.Context, opts ...grpc.CallOption) (BucketService_WriteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &BucketService_ServiceDesc.Streams[1], "/arangodb.operator.ml.storage.v1.BucketService/WriteObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceWriteObjectClient{stream}
	return x, nil
}

type BucketService_WriteObjectClient interface {
	Send(*WriteObjectChunk) error
	Recv() (*WriteObjectControl, error)
	grpc.ClientStream
}

type bucketServiceWriteObjectClient struct {
	grpc.ClientStream
}

func (x *bucketServiceWriteObjectClient) Send(m *WriteObjectChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketServiceWriteObjectClient) Recv() (*WriteObjectControl, error) {
	m := new(WriteObjectControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) GetObjectInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ObjectInfo, error) {
	out := new(ObjectInfo)
	err := c.cc.Invoke(ctx, "/arangodb.operator.ml.storage.v1.BucketService/GetObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility
type BucketServiceServer interface {
	// Get the current API version of this service.
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// BucketExists checks if the specified bucket exists
	BucketExists(context.Context, *BucketRequest) (*v1.YesOrNo, error)
	// CreateBucket creates a bucket
	CreateBucket(context.Context, *BucketRequest) (*v1.Empty, error)
	// DeleteBucket deletes a bucket
	// Notice that this deletes all data contained in the bucket as well
	DeleteBucket(context.Context, *BucketRequest) (*v1.Empty, error)
	// GetRepositoryURL get the URL needed to store/delete objects in a bucket
	GetRepositoryURL(context.Context, *PathRequest) (*RepositoryURL, error)
	// DeletePath deletes the specified path (recursively) from the provided bucket
	DeletePath(context.Context, *PathRequest) (*v1.Empty, error)
	// GetPathSize provides the size in bytes for the specified path from the provided bucket
	GetPathSize(context.Context, *PathRequest) (*PathSize, error)
	// ReadObject opens an object in the bucket and streams the existing data from the object into the client
	ReadObject(*PathRequest, BucketService_ReadObjectServer) error
	// WriteObject creates or opens an object in the bucket and allows the client to stream (additional) data into the object
	WriteObject(BucketService_WriteObjectServer) error
	// GetObjectInfo provides information for the specified object from the provided bucket
	// A Not-Found error is returned if the object cannot be found
	GetObjectInfo(context.Context, *PathRequest) (*ObjectInfo, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServiceServer struct {
}

func (UnimplementedBucketServiceServer) GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (UnimplementedBucketServiceServer) BucketExists(context.Context, *BucketRequest) (*v1.YesOrNo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketExists not implemented")
}
func (UnimplementedBucketServiceServer) CreateBucket(context.Context, *BucketRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBucketServiceServer) DeleteBucket(context.Context, *BucketRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketServiceServer) GetRepositoryURL(context.Context, *PathRequest) (*RepositoryURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryURL not implemented")
}
func (UnimplementedBucketServiceServer) DeletePath(context.Context, *PathRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePath not implemented")
}
func (UnimplementedBucketServiceServer) GetPathSize(context.Context, *PathRequest) (*PathSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathSize not implemented")
}
func (UnimplementedBucketServiceServer) ReadObject(*PathRequest, BucketService_ReadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (UnimplementedBucketServiceServer) WriteObject(BucketService_WriteObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteObject not implemented")
}
func (UnimplementedBucketServiceServer) GetObjectInfo(context.Context, *PathRequest) (*ObjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInfo not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BucketExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BucketExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/BucketExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BucketExists(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).CreateBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetRepositoryURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetRepositoryURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/GetRepositoryURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetRepositoryURL(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeletePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeletePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/DeletePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeletePath(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetPathSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetPathSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/GetPathSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetPathSize(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_ReadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BucketServiceServer).ReadObject(m, &bucketServiceReadObjectServer{stream})
}

type BucketService_ReadObjectServer interface {
	Send(*ReadObjectChunk) error
	grpc.ServerStream
}

type bucketServiceReadObjectServer struct {
	grpc.ServerStream
}

func (x *bucketServiceReadObjectServer) Send(m *ReadObjectChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BucketService_WriteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServiceServer).WriteObject(&bucketServiceWriteObjectServer{stream})
}

type BucketService_WriteObjectServer interface {
	Send(*WriteObjectControl) error
	Recv() (*WriteObjectChunk, error)
	grpc.ServerStream
}

type bucketServiceWriteObjectServer struct {
	grpc.ServerStream
}

func (x *bucketServiceWriteObjectServer) Send(m *WriteObjectControl) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketServiceWriteObjectServer) Recv() (*WriteObjectChunk, error) {
	m := new(WriteObjectChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BucketService_GetObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.operator.ml.storage.v1.BucketService/GetObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetObjectInfo(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.operator.ml.storage.v1.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _BucketService_GetAPIVersion_Handler,
		},
		{
			MethodName: "BucketExists",
			Handler:    _BucketService_BucketExists_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _BucketService_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _BucketService_DeleteBucket_Handler,
		},
		{
			MethodName: "GetRepositoryURL",
			Handler:    _BucketService_GetRepositoryURL_Handler,
		},
		{
			MethodName: "DeletePath",
			Handler:    _BucketService_DeletePath_Handler,
		},
		{
			MethodName: "GetPathSize",
			Handler:    _BucketService_GetPathSize_Handler,
		},
		{
			MethodName: "GetObjectInfo",
			Handler:    _BucketService_GetObjectInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadObject",
			Handler:       _BucketService_ReadObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteObject",
			Handler:       _BucketService_WriteObject_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/api/ml/storage/v1/bucketservice.proto",
}
