//
// DISCLAIMER
//
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/arangodb/kube-arangodb/pkg/apis/ml/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArangoMLExtensionLister helps list ArangoMLExtensions.
// All objects returned here must be treated as read-only.
type ArangoMLExtensionLister interface {
	// List lists all ArangoMLExtensions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArangoMLExtension, err error)
	// ArangoMLExtensions returns an object that can list and get ArangoMLExtensions.
	ArangoMLExtensions(namespace string) ArangoMLExtensionNamespaceLister
	ArangoMLExtensionListerExpansion
}

// arangoMLExtensionLister implements the ArangoMLExtensionLister interface.
type arangoMLExtensionLister struct {
	indexer cache.Indexer
}

// NewArangoMLExtensionLister returns a new ArangoMLExtensionLister.
func NewArangoMLExtensionLister(indexer cache.Indexer) ArangoMLExtensionLister {
	return &arangoMLExtensionLister{indexer: indexer}
}

// List lists all ArangoMLExtensions in the indexer.
func (s *arangoMLExtensionLister) List(selector labels.Selector) (ret []*v1alpha1.ArangoMLExtension, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArangoMLExtension))
	})
	return ret, err
}

// ArangoMLExtensions returns an object that can list and get ArangoMLExtensions.
func (s *arangoMLExtensionLister) ArangoMLExtensions(namespace string) ArangoMLExtensionNamespaceLister {
	return arangoMLExtensionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArangoMLExtensionNamespaceLister helps list and get ArangoMLExtensions.
// All objects returned here must be treated as read-only.
type ArangoMLExtensionNamespaceLister interface {
	// List lists all ArangoMLExtensions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArangoMLExtension, err error)
	// Get retrieves the ArangoMLExtension from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ArangoMLExtension, error)
	ArangoMLExtensionNamespaceListerExpansion
}

// arangoMLExtensionNamespaceLister implements the ArangoMLExtensionNamespaceLister
// interface.
type arangoMLExtensionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArangoMLExtensions in the indexer for a given namespace.
func (s arangoMLExtensionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ArangoMLExtension, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArangoMLExtension))
	})
	return ret, err
}

// Get retrieves the ArangoMLExtension from the indexer for a given namespace and name.
func (s arangoMLExtensionNamespaceLister) Get(name string) (*v1alpha1.ArangoMLExtension, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("arangomlextension"), name)
	}
	return obj.(*v1alpha1.ArangoMLExtension), nil
}
