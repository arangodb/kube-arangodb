//
// DISCLAIMER
//
// Copyright 2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/arangodb/kube-arangodb/pkg/apis/ml/v1alpha1"
	mlv1alpha1 "github.com/arangodb/kube-arangodb/pkg/generated/clientset/versioned/typed/ml/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeArangoMLExtensions implements ArangoMLExtensionInterface
type fakeArangoMLExtensions struct {
	*gentype.FakeClientWithList[*v1alpha1.ArangoMLExtension, *v1alpha1.ArangoMLExtensionList]
	Fake *FakeMlV1alpha1
}

func newFakeArangoMLExtensions(fake *FakeMlV1alpha1, namespace string) mlv1alpha1.ArangoMLExtensionInterface {
	return &fakeArangoMLExtensions{
		gentype.NewFakeClientWithList[*v1alpha1.ArangoMLExtension, *v1alpha1.ArangoMLExtensionList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("arangomlextensions"),
			v1alpha1.SchemeGroupVersion.WithKind("ArangoMLExtension"),
			func() *v1alpha1.ArangoMLExtension { return &v1alpha1.ArangoMLExtension{} },
			func() *v1alpha1.ArangoMLExtensionList { return &v1alpha1.ArangoMLExtensionList{} },
			func(dst, src *v1alpha1.ArangoMLExtensionList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ArangoMLExtensionList) []*v1alpha1.ArangoMLExtension {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ArangoMLExtensionList, items []*v1alpha1.ArangoMLExtension) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
