//
// DISCLAIMER
//
// Copyright 2024 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "github.com/arangodb/kube-arangodb/pkg/apis/apps/v1"
	scheme "github.com/arangodb/kube-arangodb/pkg/generated/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ArangoJobsGetter has a method to return a ArangoJobInterface.
// A group's client should implement this interface.
type ArangoJobsGetter interface {
	ArangoJobs(namespace string) ArangoJobInterface
}

// ArangoJobInterface has methods to work with ArangoJob resources.
type ArangoJobInterface interface {
	Create(ctx context.Context, arangoJob *v1.ArangoJob, opts metav1.CreateOptions) (*v1.ArangoJob, error)
	Update(ctx context.Context, arangoJob *v1.ArangoJob, opts metav1.UpdateOptions) (*v1.ArangoJob, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, arangoJob *v1.ArangoJob, opts metav1.UpdateOptions) (*v1.ArangoJob, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ArangoJob, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ArangoJobList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ArangoJob, err error)
	ArangoJobExpansion
}

// arangoJobs implements ArangoJobInterface
type arangoJobs struct {
	*gentype.ClientWithList[*v1.ArangoJob, *v1.ArangoJobList]
}

// newArangoJobs returns a ArangoJobs
func newArangoJobs(c *AppsV1Client, namespace string) *arangoJobs {
	return &arangoJobs{
		gentype.NewClientWithList[*v1.ArangoJob, *v1.ArangoJobList](
			"arangojobs",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.ArangoJob { return &v1.ArangoJob{} },
			func() *v1.ArangoJobList { return &v1.ArangoJobList{} }),
	}
}
