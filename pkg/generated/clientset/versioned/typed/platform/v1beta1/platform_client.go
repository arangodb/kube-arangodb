//
// DISCLAIMER
//
// Copyright 2025 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	http "net/http"

	platformv1beta1 "github.com/arangodb/kube-arangodb/pkg/apis/platform/v1beta1"
	scheme "github.com/arangodb/kube-arangodb/pkg/generated/clientset/versioned/scheme"
	rest "k8s.io/client-go/rest"
)

type PlatformV1beta1Interface interface {
	RESTClient() rest.Interface
	ArangoPlatformChartsGetter
	ArangoPlatformServicesGetter
	ArangoPlatformStoragesGetter
}

// PlatformV1beta1Client is used to interact with features provided by the platform.arangodb.com group.
type PlatformV1beta1Client struct {
	restClient rest.Interface
}

func (c *PlatformV1beta1Client) ArangoPlatformCharts(namespace string) ArangoPlatformChartInterface {
	return newArangoPlatformCharts(c, namespace)
}

func (c *PlatformV1beta1Client) ArangoPlatformServices(namespace string) ArangoPlatformServiceInterface {
	return newArangoPlatformServices(c, namespace)
}

func (c *PlatformV1beta1Client) ArangoPlatformStorages(namespace string) ArangoPlatformStorageInterface {
	return newArangoPlatformStorages(c, namespace)
}

// NewForConfig creates a new PlatformV1beta1Client for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*PlatformV1beta1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	httpClient, err := rest.HTTPClientFor(&config)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(&config, httpClient)
}

// NewForConfigAndClient creates a new PlatformV1beta1Client for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*PlatformV1beta1Client, error) {
	config := *c
	if err := setConfigDefaults(&config); err != nil {
		return nil, err
	}
	client, err := rest.RESTClientForConfigAndClient(&config, h)
	if err != nil {
		return nil, err
	}
	return &PlatformV1beta1Client{client}, nil
}

// NewForConfigOrDie creates a new PlatformV1beta1Client for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *PlatformV1beta1Client {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}

// New creates a new PlatformV1beta1Client for the given RESTClient.
func New(c rest.Interface) *PlatformV1beta1Client {
	return &PlatformV1beta1Client{c}
}

func setConfigDefaults(config *rest.Config) error {
	gv := platformv1beta1.SchemeGroupVersion
	config.GroupVersion = &gv
	config.APIPath = "/apis"
	config.NegotiatedSerializer = rest.CodecFactoryForGeneratedClient(scheme.Scheme, scheme.Codecs).WithoutConversion()

	if config.UserAgent == "" {
		config.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	return nil
}

// RESTClient returns a RESTClient that is used to communicate
// with API server by this client implementation.
func (c *PlatformV1beta1Client) RESTClient() rest.Interface {
	if c == nil {
		return nil
	}
	return c.restClient
}
